#!/bin/bash  # not for execution, but vim syntax hinting
#

SSCRIPT=${BASH_SOURCE[1]}   # This should be the script that called .bash_header, BASH_SOURCE[0] /IS/ .bash_header

# setup our tracking loop, if not already created
# doesn't clear unless we set it with the declare
declare -a SEEN

#echo "SSCRIPT: $SSCRIPT"
#echo "THEM: ${BASH_SOURCE[2]}"
#echo "SEEN: ${SEEN[*]}"

# If 'SSCRIPT' is already in tracking, return
[[ ${SEEN[*]} =~ (^|[[:space:]])"${SSCRIPT}"($|[[:space:]]) ]] && return 0

# Add 'SSCRIPT' to the loop detect
# And set 'SSCRIPT' to 'FIRST' if it is not already set
SEEN+=("${SSCRIPT}")
FIRST=${FIRST:-${SSCRIPT}}

ME=$(printf "%s[%d]" $(ps -o comm=,pid= $$))

if [ -z ${BASH_SOURCE[2]} ]
then
    # If BASH_SOURCE[2] is blank, get the name of the parent process ID
    PARENT=$(printf "%s[%d]" $(ps -o comm=,pid= $PPID))

    printf "${NOW:=$(date)}: ${PARENT}: executed ${ME}\n" # Parrent executed bash(?)
    printf "${NOW:=$(date)}: ${ME}: sourced '${SSCRIPT}'\n" # current process 'sourced' 'SSCRIPT'

    unset PARENT 

else
    # Otherwise, get the calling script and line number that 'sourced' us
    THEM=$(caller 1 | awk '{print $NF":"$1}')

    printf "${NOW:=$(date)}: ${ME}: '${THEM}' sourced '${SSCRIPT}'\n"

    unset THEM

fi >>~/.bash_log

unset ME NOW SSCRIPT
